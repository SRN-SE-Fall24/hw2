# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest tests.py
    - name: Coverage badge
      run: |
        pip install coverage-badge coverage
        coverage run -m pytest tests.py
        coverage-badge -o coverage/cov.svg -f
    - name: Static Tools
      run: |
        pip install autopep8 pylint radon
        autopep8 --in-place *.py        
        echo $(echo '{"schemaVersion": 1, "label": "pylint", "message": "'$(pylint hw2_debugging.py | grep -oP '\d+\.\d+/10' | head -n 1)'", "color": "yellowgreen"}') > pylint_score.json
        echo $(echo '{"schemaVersion": 1, "label": "radon", "message": "'$( radon cc hw2_debugging.py | grep -oP '(?<=- )[A-Za-z]' | sort | tail -n 1)'", "color": "green"}') > radon_grade.json
    - name: Commit changes from YML
      run: |
        git add .
        if git diff --cached --quiet; then
          echo ""
        else
          git commit -m 'updating static tools data'
          git push
        fi
